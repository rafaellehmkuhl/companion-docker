#!/usr/bin/env bash

BLUEOS_PATH=/home/pi
SERVICES_PATH=$BLUEOS_PATH/services
TOOLS_PATH=$BLUEOS_PATH/tools

# MAVLink configuration
MAV_SYSTEM_ID=1
## We use the last ID for the companion computer component reserved address for our usage
MAV_COMPONENT_ID_ONBOARD_COMPUTER4=194

# Set permission of docker unix socket file to be accessible by nginx

if [ -e "/var/run/docker.sock" ]; then
    chmod 777 /var/run/docker.sock
else
    echo "Error: Docket socket file does not exist!"
fi

SERVICES=(
    'beacon',"$SERVICES_PATH/beacon/main.py"
    'cable_guy',"$SERVICES_PATH/cable_guy/main.py"
    'wifi',"$SERVICES_PATH/wifi/main.py --socket wlan0"
    'autopilot',"$SERVICES_PATH/ardupilot_manager/ardupilot_manager/main.py"
    'bridget',"$SERVICES_PATH/bridget/main.py"
    'commander',"$SERVICES_PATH/commander/main.py"
    'nmea_injector',"$SERVICES_PATH/nmea_injector/main.py"
    'helper',"$SERVICES_PATH/helper/main.py"
    'video',"mavlink-camera-manager --default-settings BlueROVUDP  --mavlink udpout:127.0.0.1:14001 --verbose"
    'mavlink2rest',"mavlink2rest --connect=udpin:127.0.0.1:14000 --server 0.0.0.0:6040 --system-id $MAV_SYSTEM_ID --component-id $MAV_COMPONENT_ID_ONBOARD_COMPUTER4"
    'linux2rest',"linux2rest"
    'filebrowser',"filebrowser --database /etc/filebrowser/filebrowser.db --baseurl /file-browser"
    'versionchooser',"$SERVICES_PATH/versionchooser/main.py"
    'pardal',"$SERVICES_PATH/pardal/main.py"
    'ping',"$SERVICES_PATH/ping/main.py"
    'user_terminal',"cat /etc/motd"
    'ttyd',"ttyd -p 8088 /usr/bin/tmux attach -t user_terminal"
    'nginx',"nice --18 nginx -g \"daemon off;\" -c $TOOLS_PATH/nginx/nginx.conf"
)

tmux -f /etc/tmux.conf start-server

function create_service {
    tmux new -d -s "$1" || true
    SESSION_NAME="$1:0"
    # Set all necessary environment variables for the new tmux session
    for NAME in $(compgen -v | grep MAV_); do
        VALUE=${!NAME}
        tmux setenv -t $SESSION_NAME -g $NAME $VALUE
    done
    tmux send-keys -t $SESSION_NAME "$2" C-m
}

echo "Starting services.."
for TUPLE in "${SERVICES[@]}"; do
    IFS=',' read NAME EXECUTABLE <<< ${TUPLE}
    echo "Service: $NAME: $EXECUTABLE"
    create_service $NAME "$EXECUTABLE"
done

echo "BlueOS running!"
